<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:component-scan base-package="com.learn"/>

    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!-- 视图前缀 -->
                        <property name="prefix" value="/html/"/>
                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!--
        配置默认的servlet处理静态资源
        当前工程的web.xml配置的前端控制器DispatcherServlet的url-pattern是/
        tomcat的web.xml配置的DefaultServlet的url-pattern也是/
        此时，浏览器发送的请求会优先被DispatcherServlet进行处理，但是DispatcherServlet无法处理静态资源
        若配置了<mvc:default-servlet-handler />，此时浏览器发送的所有请求都会被DefaultServlet处理
        若配置了<mvc:default-servlet-handler />和<mvc:annotation-driven />
        浏览器发送的请求会先被DispatcherServlet处理，无法处理在交给DefaultServlet处理
    -->
    <mvc:default-servlet-handler/>

    <!--开启mvc的注解驱动-->
    <mvc:annotation-driven/>

    <!--配置视图控制器-->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>

    <!--<mvc:interceptors>
        &lt;!&ndash;<bean class="com.learn.interceptor.FirstInterceptor"/>&ndash;&gt;
        &lt;!&ndash;<ref bean="firstInterceptor"/>&ndash;&gt;
        &lt;!&ndash;bean和ref标签所配置的拦截器，都是对DispatcherServlet所处理的所有请求进行拦截&ndash;&gt;

        &lt;!&ndash;<mvc:interceptor>
            &lt;!&ndash;设置需要拦截的请求，/**表示所有请求&ndash;&gt;
            <mvc:mapping path="/**"/>
            &lt;!&ndash;配置需要排除拦截的请求&ndash;&gt;
            <mvc:exclude-mapping path="/abc"/>
            &lt;!&ndash;配置拦截器&ndash;&gt;
            <ref bean="firstInterceptor"/>
        </mvc:interceptor>&ndash;&gt;

        <ref bean="firstInterceptor"/>
        <ref bean="secondInterceptor"/>
    </mvc:interceptors>-->

    <!--bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                &lt;!&ndash;
                    key：设置要处理的异常
                    value：设置该异常出现时，要跳转的逻辑视图
                &ndash;&gt;
                <prop key="java.lang.ArithmeticException">error</prop>
            </props>
        </property>
        &lt;!&ndash;exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享&ndash;&gt;
        <property name="exceptionAttribute" value="ex"></property>
    </bean>-->
</beans>